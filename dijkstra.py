# -*- coding: utf-8 -*-
"""dijkstra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mi-l983AlskhH6ePFWa8cN0vNK-NuOQH
"""

import heapq

def dijkstra(graph, start):

    pq = []
    heapq.heappush(pq, (0, start))
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    visited = set()

    while pq:
        current_distance, current_node = heapq.heappop(pq)

        if current_node in visited:
            continue

        visited.add(current_node)

        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))

    return distances


graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('A', 1), ('C', 2), ('D', 6)],
    'C': [('A', 4), ('B', 2), ('D', 3)],
    'D': [('B', 6), ('C', 3)],
}

start_vertex = 'A'
shortest_paths = dijkstra(graph, start_vertex)

print(f"Shortest paths from {start_vertex}:")
for vertex, distance in shortest_paths.items():
    print(f"{vertex}: {distance}")

