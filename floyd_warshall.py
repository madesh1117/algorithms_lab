# -*- coding: utf-8 -*-
"""floyd_warshall.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fp1sjYbhruGBHrDGLUUA5KP_LAYzb2Xm
"""

# Floyd-Warshall Algorithm
def floyd_warshall(graph):

    n = len(graph)

    dist = [[float('inf')] * n for _ in range(n)]


    for i in range(n):
        for j in range(n):
            dist[i][j] = graph[i][j]


    for i in range(n):
        dist[i][i] = 0


    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    return dist


graph = [
    [0, 3, float('inf'), 7],
    [8, 0, 2, float('inf')],
    [5, float('inf'), 0, 1],
    [2, float('inf'), float('inf'), 0]
]


shortest_paths = floyd_warshall(graph)


print("Shortest distances between every pair of vertices:")
for row in shortest_paths:
    print(row)

